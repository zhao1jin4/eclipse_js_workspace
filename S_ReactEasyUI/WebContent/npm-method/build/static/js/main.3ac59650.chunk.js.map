{"version":3,"sources":["logo.svg","AppDataGridServer.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","total","pageNumber","pageSize","data","loading","pagePosition","options","value","text","loadPage","_this2","setState","setTimeout","result","getData","assign","rows","res","$","ajax","url","type","dataType","async","my_custome_param","page","success","response","event","_this3","react_default","a","createElement","style","marginBottom","rc_easyui_min","htmlFor","inputId","width","editable","panelStyle","height","onChange","pagination","lazy","onPageChange","handlePageChange","bind","field","title","align","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","AppDataGridServer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kNC+HzBC,cAxHb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,EACPC,WAAY,EACZC,SAAU,GACVC,KAAM,GACNC,SAAS,EACTC,aAAc,SACdC,QAAS,CACP,CAAEC,MAAO,SAAUC,KAAM,UACzB,CAAED,MAAO,MAAOC,KAAM,OACtB,CAAED,MAAO,OAAQC,KAAM,UAZVhB,mFAiBjBG,KAAKc,SAASd,KAAKI,MAAME,WAAYN,KAAKI,MAAMG,2CAEzCD,EAAYC,GAAU,IAAAQ,EAAAf,KAC7BA,KAAKgB,SAAS,CAAEP,SAAS,IACzBQ,WAAW,WACT,IAAIC,EAASH,EAAKI,QAAQb,EAAYC,GACtCQ,EAAKC,SAASlB,OAAOsB,OAAO,GAAIF,EAAQ,CACtCV,KAAMU,EAAOG,KACbZ,SAAS,MAEV,qCAEGH,EAAYC,GAyBnB,IAAIe,EAAI,KAkBL,OAjBHC,IAAEC,KACF,CACAC,IAAI,uBACJC,KAAK,OACFC,SAAS,OACTC,OAAM,EACTpB,KAAK,CACEqB,iBAAiB,MACjBC,KAAMxB,EACNe,KAAKd,GAEZwB,QAAQ,SAASC,GAEhBV,EAAIU,KAIKV,2CAGMW,GACfjC,KAAKc,SAASmB,EAAM3B,WAAY2B,EAAM1B,2CAE/B,IAAA2B,EAAAlC,KACP,OACEmC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,aAAc,KAC1BJ,EAAAC,EAAAC,cAACG,EAAA,MAAD,CAAOC,QAAQ,MAAf,cACAN,EAAAC,EAAAC,cAACG,EAAA,SAAD,CAAUE,QAAQ,KAAKJ,MAAO,CAAEK,MAAO,KACrCnC,KAAMR,KAAKI,MAAMO,QACjBiC,UAAU,EACVC,WAAY,CAAEC,OAAQ,QACtBlC,MAAOZ,KAAKI,MAAMM,aAClBqC,SAAU,SAACnC,GAAD,OAAWsB,EAAKlB,SAAS,CAAEN,aAAcE,QAGvDuB,EAAAC,EAAAC,cAACG,EAAA,SAAD1C,OAAAsB,OAAA,CACEkB,MAAO,CAAEQ,OAAQ,KACjBE,YAAU,EACVC,MAAI,GACAjD,KAAKI,MAJX,CAKE8C,aAAclD,KAAKmD,iBAAiBC,KAAKpD,QAUrCmC,EAAAC,EAAAC,cAACG,EAAA,WAAD,CAAYa,MAAM,KAAKC,MAAM,OAC7BnB,EAAAC,EAAAC,cAACG,EAAA,WAAD,CAAYa,MAAM,WAAWC,MAAM,SACnCnB,EAAAC,EAAAC,cAACG,EAAA,WAAD,CAAYa,MAAM,QAAQC,MAAM,QAAQC,MAAM,UAC9CpB,EAAAC,EAAAC,cAACG,EAAA,WAAD,CAAYa,MAAM,SAASC,MAAM,SAASC,MAAM,UAChDpB,EAAAC,EAAAC,cAACG,EAAA,WAAD,CAAYa,MAAM,QAAQC,MAAM,QAAQC,MAAM,UAC9CpB,EAAAC,EAAAC,cAACG,EAAA,WAAD,CAAYa,MAAM,WAAWC,MAAM,sBAjH/BE,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3ac59650.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { DataGrid, GridColumn, ComboBox, Label } from 'rc-easyui';\nimport $ from  'jquery'\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      total: 0,\n      pageNumber: 1,\n      pageSize: 20,\n      data: [],\n      loading: false,\n      pagePosition: \"bottom\",\n      options: [\n        { value: \"bottom\", text: \"Bottom\" },\n        { value: \"top\", text: \"Top\" },\n        { value: \"both\", text: \"Both\" }\n      ]\n    }\n  }\n  componentDidMount() {\n    this.loadPage(this.state.pageNumber, this.state.pageSize)\n  }\n  loadPage(pageNumber, pageSize) {\n    this.setState({ loading: true })\n    setTimeout(() => {\n      let result = this.getData(pageNumber, pageSize);\n      this.setState(Object.assign({}, result, {\n        data: result.rows,\n        loading: false\n      }))\n    }, 1000);\n  }\n  getData(pageNumber, pageSize) {\n    /*  \n    let total = 100000;\n    let data = [];\n    let start = (pageNumber - 1) * pageSize;\n    for (let i = start + 1; i <= start + pageSize; i++) {\n      let amount = Math.floor(Math.random() * 1000);\n      let price = Math.floor(Math.random() * 1000);\n      data.push({\n        inv: \"Inv No \" + i,\n        name: \"Name \" + i,\n        amount: amount,\n        price: price,\n        cost: amount * price,\n        note: \"Note \" + i\n      });\n    }\n    return {\n      total: total,\n      pageNumber: pageNumber,\n      pageSize: pageSize,\n      rows: data\n    };\n    */\n   \n   var res=null;\n\t  $.ajax\n\t\t({\n\t\t\turl:'easyUI/queryJsonData',\n\t\t\ttype:\"POST\",\n\t\t    dataType:\"json\",\n\t\t    async:false,\n\t\t\tdata:{\n\t\t        my_custome_param:\"123\",\n\t\t        page: pageNumber,\n\t\t        rows:pageSize\n\t\t\t}, \n\t\t\tsuccess:function(response)\n\t\t\t{\n\t\t\t\tres=response;\n\t\t\t\t\n\t\t\t}\n\t\t});\n      return res;\n     \n  }\n  handlePageChange(event) {\n    this.loadPage(event.pageNumber, event.pageSize)\n  }\n  render() {\n    return (\n      <div>\n        <h2>Pagination - Lazy Load</h2>\n        <div style={{ marginBottom: 10 }}>\n          <Label htmlFor=\"c1\">Pager on: </Label>\n          <ComboBox inputId=\"c1\" style={{ width: 120 }}\n            data={this.state.options}\n            editable={false}\n            panelStyle={{ height: 'auto' }}\n            value={this.state.pagePosition}\n            onChange={(value) => this.setState({ pagePosition: value })}\n          />\n        </div>\n        <DataGrid\n          style={{ height: 250 }}\n          pagination\n          lazy\n          {...this.state}\n          onPageChange={this.handlePageChange.bind(this)}\n        >\n       {/* \n              <GridColumn field=\"inv\" title=\"Inv No\"></GridColumn>\n              <GridColumn field=\"name\" title=\"Name\"></GridColumn>\n              <GridColumn field=\"amount\" title=\"Amount\" align=\"right\"></GridColumn>\n              <GridColumn field=\"price\" title=\"Price\" align=\"right\"></GridColumn>\n              <GridColumn field=\"cost\" title=\"Cost\" align=\"right\"></GridColumn>\n              <GridColumn field=\"note\" title=\"Note\"></GridColumn>\n          */}       \n              <GridColumn field=\"id\" title=\"id\"></GridColumn>\n              <GridColumn field=\"username\" title=\"Name\"></GridColumn>\n              <GridColumn field=\"hobby\" title=\"hobby\" align=\"right\"></GridColumn>\n              <GridColumn field=\"salary\" title=\"salary\" align=\"right\"></GridColumn>\n              <GridColumn field=\"isMan\" title=\"isMan\" align=\"right\"></GridColumn>\n              <GridColumn field=\"birthday\" title=\"birthday\"></GridColumn>\n             \n        </DataGrid>\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport App from './AppDataGridServer';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n "],"sourceRoot":""}